package com.bing.lan.comm.base.mvp.activity;

import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.os.Build;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.IBinder;
import android.os.Looper;
import android.os.Message;

import com.bing.lan.comm.utils.musicplay.MusicPlayer;
import com.bing.lan.comm.utils.musicplay.MusicServiceCons;

import java.lang.ref.WeakReference;

public abstract class BaseMusicActivity<T extends IBaseActivityContract.IBaseActivityPresenter>
        extends BaseActivity<T> {

    public static final int MSG_PLAY_PAUSE = 0;
    public static final int MSG_PREVIOUS = 1;
    public static final int MSG_NEXT = 2;
    public static final int MSG_INIT = 3;
    public static final int MSG_UPDATE_UI = 10;
    public static final int MSG_SAVE_DB = 11;

    protected MusicBroadcastReceiver mReceiver;
    protected MusicPlayerHandler mPlayerHandler;
    protected MusicMainHandler mMainHandler;
    protected HandlerThread mHandlerThread;
    private MusicPlayer.ServiceToken mServiceToken;

    protected void initPlayHandler() {
        mHandlerThread = new HandlerThread("MusicPlayerHandler12",
                android.os.Process.THREAD_PRIORITY_BACKGROUND);
        mHandlerThread.start();
        mPlayerHandler = new MusicPlayerHandler(this, mHandlerThread.getLooper());
        mMainHandler = new MusicMainHandler(this);
    }

    private void onServiceConnected(ComponentName name, IBinder service) {

    }

    private void onServiceDisconnected(ComponentName name) {

    }

    private void initMusicPlay() {
        mServiceToken = MusicPlayer.bindToService(this, new ServiceConnection() {
            @Override
            public void onServiceConnected(ComponentName name, IBinder service) {
                BaseMusicActivity.this.onServiceConnected(name, service);
            }

            @Override
            public void onServiceDisconnected(ComponentName name) {
                BaseMusicActivity.this.onServiceDisconnected(name);
            }
        });
    }

    /**
     * 权限请求成功时调用
     */
    protected void requestPermissionSucceed() {
        registerMusicReceiver();
        initMusicPlay();
        initPlayHandler();
        readyStartPresenter();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        if (mReceiver != null) {
            unregisterReceiver(mReceiver);
            mReceiver = null;
        }

        destroyHandler();
        MusicPlayer.unbindFromService(mServiceToken);
    }

    private void destroyHandler() {

        if (mMainHandler != null) {
            mMainHandler.removeCallbacksAndMessages(null);
            mMainHandler = null;
        }
        if (mPlayerHandler != null) {
            mPlayerHandler.removeCallbacksAndMessages(null);
            mPlayerHandler = null;
        }
        if (mHandlerThread != null) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2)
                mHandlerThread.quitSafely();
            else
                mHandlerThread.quit();
        }
    }

    //注册广播接收者,接收音乐广播
    private void registerMusicReceiver() {
        mReceiver = new MusicBroadcastReceiver(this);
        final IntentFilter filter = new IntentFilter();
        filter.addAction(MusicServiceCons.MUSIC_SERVICE_STATUS_CHANGES_BROADCAST);
        // filter.addAction(MusicServiceCons.MUSIC_SAVE_MUSIC_DB_BROADCAST);
        registerReceiver(mReceiver, filter);
    }

    //主线程的操作(更新ui)
    protected abstract void handlerMusicMainMessage(Message msg);

    //子线程的操作(操作播放器)
    protected abstract void handlerMusicPlayerMessage(Message msg);

    //主线程 收到广播后的操作(发消息)
    protected abstract void handlerOnReceive(Context context, Intent intent);

    public static class MusicPlayerHandler extends Handler {

        private final WeakReference<BaseMusicActivity> mBaseMusicActivity;

        public MusicPlayerHandler(final BaseMusicActivity activity, final Looper looper) {
            super(looper);
            mBaseMusicActivity = new WeakReference<>(activity);
        }

        @Override
        public void handleMessage(Message msg) {
            if (mBaseMusicActivity.get() != null) {

                mBaseMusicActivity.get().handlerMusicPlayerMessage(msg);
            }
        }
    }

    public static class MusicBroadcastReceiver extends BroadcastReceiver {

        private final WeakReference<BaseMusicActivity> mBaseMusicActivity;

        MusicBroadcastReceiver(BaseMusicActivity activity) {
            mBaseMusicActivity = new WeakReference<>(activity);
        }

        @Override
        public void onReceive(Context context, Intent intent) {
            if (mBaseMusicActivity.get() != null) {
                mBaseMusicActivity.get().handlerOnReceive(context, intent);
            }
        }
    }

    public static class MusicMainHandler extends Handler {

        private final WeakReference<BaseMusicActivity> mBaseMusicActivity;

        public MusicMainHandler(final BaseMusicActivity activity) {
            mBaseMusicActivity = new WeakReference<>(activity);
        }

        @Override
        public void handleMessage(Message msg) {
            if (mBaseMusicActivity.get() != null) {
                mBaseMusicActivity.get().handlerMusicMainMessage(msg);
            }
        }
    }
}
